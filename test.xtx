(def name: gauss as: (fn
	with-params: (map for:  n)
	as: (divide
		value: (multiply
			value: n
			with: (add value: n to: 1)
		)
		by: 2
	)
))
(assert test: (equals? value: (gauss for: 10) compared-to: 55))
nil
(def name: lst as: (cons head: 3 rest: (cons head: 4)))
(def name: sum as: (fn
	with-params: (map list: l)
	as: (if
		cond: (empty? list: l)
		then: 0
		else: (add
			value: (head list: l)
			to: (sum list: (rest list: l))
		)
	)
))
(assert test: (equals? value: (sum list: lst) compared-to: 7))
(def name: twos as: (fn
	as: (rest list: (cons
		head: (def name: x as: 42)
		rest: (add value: x to: x)
	))
))
(twos)x(twos)
(def name: sum2 as: (fn
	with-params: (map to: n)
	as: (if
		cond: (smaller-or-equals? value: n compared-to: 0)
		then: 0
		else: (add
			value: n
			to: (sum2 to: (subtract from: n value: 1))
		)
	)
))
(assert test: (equals? value: (sum2 to: 10) compared-to: (gauss for: 10)))
(assert test: (equals? value: 3 compared-to: 3))
(assert-false test: (equals? value: 3 compared-to: 2))
(assert test: (not-equals? value: 3 compared-to: 2))
(assert-false test: (not-equals? value: 3 compared-to: 3))
(assert test: (greater? value: 3 compared-to: 2))
(assert-false test: (greater? value: 3 compared-to: 3))
(assert-false test: (greater? value: 3 compared-to: 4))
(assert test: (greater-or-equals? value: 3 compared-to: 2))
(assert test: (greater-or-equals? value: 3 compared-to: 3))
(assert-false test: (greater-or-equals? value: 3 compared-to: 4))
(assert test: (smaller? value: 3 compared-to: 4))
(assert-false test: (smaller? value: 3 compared-to: 3))
(assert-false test: (smaller? value: 3 compared-to: 2))
(assert test: (smaller-or-equals? value: 3 compared-to: 4))
(assert test: (smaller-or-equals? value: 3 compared-to: 3))
(assert-false test: (smaller-or-equals? value: 3 compared-to: 2))
(assert test: (not value: false))
(assert-false test: (not value: true))
(assert test: (or value: true with: false))
(assert-false test: (or value: false with: false))
(assert test: (and value: true with: true))
(assert-false test: (and value: true with: false))
(pdf as: out.pdf with: all unit tests successful
	(cons head: 3 rest: lst)
)