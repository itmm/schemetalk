(def name: gauss as: (fn
	with-params: (map for:  n)
	as: (divide
		value: (multiply
			value: n
			with: (add value: n to: 1)
		)
		by: 2
	)
))
(gauss for: 10)
(subtract from: 10 value: 2)
nil
(def name: lst as: (cons head: 3 rest: (cons head: 4)))
(def name: sum as: (fn
	with-params: (map list: l)
	as: (if
		cond: (empty? list: l)
		then: 0
		else: (add
			value: (head list: l)
			to: (sum list: (rest list: l))
		)
	)
))
(sum list: lst)
(def name: twos as: (fn
	as: (rest list: (cons
		head: (def name: x as: 42)
		rest: (add value: x to: x)
	))
))
(twos)x(twos)