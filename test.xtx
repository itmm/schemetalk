(def name: gauss as: (fn
	with-params: (map for:  n)
	as: (divide
		value: (multiply
			value: n
			with: (add value: n to: 1)
		)
		by: 2
	)
))
(gauss for: 10)
nil
(def name: lst as: (cons head: 3 rest: (cons head: 4)))
(def name: sum as: (fn
	with-params: (map list: l)
	as: (if
		cond: (empty? list: l)
		then: 0
		else: (add
			value: (head list: l)
			to: (sum list: (rest list: l))
		)
	)
))
(sum list: lst)
(def name: twos as: (fn
	as: (rest list: (cons
		head: (def name: x as: 42)
		rest: (add value: x to: x)
	))
))
(twos)x(twos)
(def name: sum2 as: (fn
	with-params: (map to: n)
	as: (if
		cond: (smaller-or-equals? value: n compared-to: 0)
		then: 0
		else: (add
			value: n
			to: (sum2 to: (subtract from: n value: 1))
		)
	)
))
(sum2 to: 10)
(equals? value: 3 compared-to: 3)
(equals? value: 3 compared-to: 2)
(not-equals? value: 3 compared-to: 2)
(not-equals? value: 3 compared-to: 3)
(greater? value: 3 compared-to: 2)
(greater? value: 3 compared-to: 3)
(greater? value: 3 compared-to: 4)
(greater-or-equals? value: 3 compared-to: 2)
(greater-or-equals? value: 3 compared-to: 3)
(greater-or-equals? value: 3 compared-to: 4)
(smaller? value: 3 compared-to: 4)
(smaller? value: 3 compared-to: 3)
(smaller? value: 3 compared-to: 2)
(smaller-or-equals? value: 3 compared-to: 4)
(smaller-or-equals? value: 3 compared-to: 3)
(smaller-or-equals? value: 3 compared-to: 2)
(assert test: (not value: false))
(assert test: (not value: (not value: true)))
(assert test: (or value: true with: false))
(assert test: (not value: (or value: false with: false)))
(assert test: (and value: true with: true))
(assert test: (not value: (and value: true with: false)))